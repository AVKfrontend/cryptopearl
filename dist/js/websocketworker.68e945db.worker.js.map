{"version":3,"file":"js/websocketworker.68e945db.worker.js","mappings":"YAAA,MAAMA,EAAsB,YACtBC,EAAM,mEACNC,EAAO,+CAA8CD,IAkCrDE,EAAe,IAAIC,UAAUF,GAE/BC,IACFA,EAAaE,UAAaC,IACxBA,EAAgBC,KAAKC,MAAMF,EAAcG,MACzCC,YAAYJ,EAAc,GAG9BD,UAAY,SAAUM,GAEpB,MAAMC,EAASD,EAAMF,KAAK,GACpBI,EAAOF,EAAMF,KAAK,GAClBK,EAASH,EAAMF,KAAK,GAEpBM,EAAU,CAAC,EACjBA,EAAQH,OAASA,EACjBG,EAAQC,KAAO,CAAE,GAAEhB,IAAsBa,KAAQC,KACjD,MAAMG,EAAgBV,KAAKW,UAAUH,GACjCZ,EAAagB,aAAef,UAAUgB,KAI1CjB,EAAakB,iBAAiB,QAAQ,KACpClB,EAAamB,KAAKL,EAAc,GAElC,CAAEM,MAAM,IANNpB,EAAamB,KAAKL,EAOtB,C","sources":["webpack://perl/./src/websocketworker.js"],"sourcesContent":["const subscriptionChannel = '5~CCCAGG~'\r\nconst KEY = 'ff22f3e7002848a426b497013ca0accce8dca58176a61a63c9562b81093a4c2d'\r\nconst url = `wss://streamer.cryptocompare.com/v2?api_key=${KEY}`\r\n\r\n// self.onconnect = function (event) {\r\n//   const port = event.ports[0]\r\n\r\n//   const wsconnection = new WebSocket(url)\r\n\r\n//   if (wsconnection) {\r\n//     wsconnection.onmessage = (messageFromWS) => {\r\n//       messageFromWS = JSON.parse(messageFromWS.data)\r\n//       port.postMessage(messageFromWS)\r\n//     }\r\n//   }\r\n//   port.onmessage = function (event) {\r\n//     // let action, coin, toCoin\r\n//     const action = event.data[0]\r\n//     const coin = event.data[1]\r\n//     const toCoin = event.data[2]\r\n//     // [action, coin, toCoin] = event.data\r\n//     const message = {}\r\n//     message.action = action\r\n//     message.subs = [`${subscriptionChannel}${coin}~${toCoin}`]\r\n//     const messageToSend = JSON.stringify(message)\r\n//     if (wsconnection.readyState === WebSocket.OPEN) {\r\n//       wsconnection.send(messageToSend)\r\n//       return\r\n//     }\r\n//     wsconnection.addEventListener('open', () => {\r\n//       wsconnection.send(messageToSend)\r\n//     },\r\n//     { once: true })\r\n//   }\r\n// }\r\n\r\nconst wsconnection = new WebSocket(url)\r\n\r\nif (wsconnection) {\r\n  wsconnection.onmessage = (messageFromWS) => {\r\n    messageFromWS = JSON.parse(messageFromWS.data)\r\n    postMessage(messageFromWS)\r\n  }\r\n}\r\nonmessage = function (event) {\r\n  // let action, coin, toCoin\r\n  const action = event.data[0]\r\n  const coin = event.data[1]\r\n  const toCoin = event.data[2]\r\n  // [action, coin, toCoin] = event.data\r\n  const message = {}\r\n  message.action = action\r\n  message.subs = [`${subscriptionChannel}${coin}~${toCoin}`]\r\n  const messageToSend = JSON.stringify(message)\r\n  if (wsconnection.readyState === WebSocket.OPEN) {\r\n    wsconnection.send(messageToSend)\r\n    return\r\n  }\r\n  wsconnection.addEventListener('open', () => {\r\n    wsconnection.send(messageToSend)\r\n  },\r\n  { once: true })\r\n}\r\n"],"names":["subscriptionChannel","KEY","url","wsconnection","WebSocket","onmessage","messageFromWS","JSON","parse","data","postMessage","event","action","coin","toCoin","message","subs","messageToSend","stringify","readyState","OPEN","addEventListener","send","once"],"sourceRoot":""}